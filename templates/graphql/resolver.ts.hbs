import { Args, Mutation, Query, Resolver, Int } from "@nestjs/graphql";

import { {{ entity.initUpperSg }}Service } from "../services";
import {
  {{ entity.initUpperSg }},
  {{ entity.initUpperSg }}CreateInput,
  {{ entity.initUpperSg }}UpdateInput
} from "../models";

@Resolver("{{ entity.initUpperSg }}")
  export class {{ entity.initUpperSg }}Resolver {
  constructor(private readonly {{ inflections.entityLower }}Service: {{ entity.initUpperSg }}Service) {}

  @Mutation(() => {{ entity.initUpperSg }})
    create{{ entity.initUpperSg }}(@Args("createInput") createInput: {{ entity.initUpperSg }}CreateInput) {
    return this.{{ inflections.entityLower }}Service.create(createInput);
  }

  @Query(() => {{ entity.initUpperSg }})
    readOne{{ entity.initUpperSg }}(id: number) {
    return this.{{ inflections.entityLower }}Service.readOne(id);
  }

  @Query(() => [{{ entity.initUpperSg }}])
    readAll{{ entity.initUpperPl }}() {
    return this.{{ inflections.entityLower }}Service.readAll();
  }

  @Mutation(() => {{ entity.initUpperSg }})
    update{{ entity.initUpperSg }}(@Args("updateInput") updateInput: {{ entity.initUpperSg }}UpdateInput) {
    return this.{{ inflections.entityLower }}Service.update(updateInput);
  }

  @Mutation(() => Int)
    delete{{ entity.initUpperSg }}(@Args({ name: "id", type: () => Int }) id: number) {
    return this.{{ inflections.entityLower }}Service.delete(id);
  }
}
